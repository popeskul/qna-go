// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/popeskul/qna-go/internal/domain"
)

// MockAuth is a mock of Auth interface.
type MockAuth struct {
	ctrl     *gomock.Controller
	recorder *MockAuthMockRecorder
}

// MockAuthMockRecorder is the mock recorder for MockAuth.
type MockAuthMockRecorder struct {
	mock *MockAuth
}

// NewMockAuth creates a new mock instance.
func NewMockAuth(ctrl *gomock.Controller) *MockAuth {
	mock := &MockAuth{ctrl: ctrl}
	mock.recorder = &MockAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuth) EXPECT() *MockAuthMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockAuth) CreateUser(ctx context.Context, userInput domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, userInput)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthMockRecorder) CreateUser(ctx, userInput interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuth)(nil).CreateUser), ctx, userInput)
}

// DeleteUserById mocks base method.
func (m *MockAuth) DeleteUserById(ctx context.Context, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserById", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserById indicates an expected call of DeleteUserById.
func (mr *MockAuthMockRecorder) DeleteUserById(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserById", reflect.TypeOf((*MockAuth)(nil).DeleteUserById), ctx, userID)
}

// GetUser mocks base method.
func (m *MockAuth) GetUser(ctx context.Context, email string, password []byte) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, email, password)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockAuthMockRecorder) GetUser(ctx, email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockAuth)(nil).GetUser), ctx, email, password)
}

// GetUserByEmail mocks base method.
func (m *MockAuth) GetUserByEmail(ctx context.Context, email string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockAuthMockRecorder) GetUserByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockAuth)(nil).GetUserByEmail), ctx, email)
}

// MockTests is a mock of Tests interface.
type MockTests struct {
	ctrl     *gomock.Controller
	recorder *MockTestsMockRecorder
}

// MockTestsMockRecorder is the mock recorder for MockTests.
type MockTestsMockRecorder struct {
	mock *MockTests
}

// NewMockTests creates a new mock instance.
func NewMockTests(ctrl *gomock.Controller) *MockTests {
	mock := &MockTests{ctrl: ctrl}
	mock.recorder = &MockTestsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTests) EXPECT() *MockTestsMockRecorder {
	return m.recorder
}

// CreateTest mocks base method.
func (m *MockTests) CreateTest(ctx context.Context, userID int, test domain.Test) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTest", ctx, userID, test)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTest indicates an expected call of CreateTest.
func (mr *MockTestsMockRecorder) CreateTest(ctx, userID, test interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTest", reflect.TypeOf((*MockTests)(nil).CreateTest), ctx, userID, test)
}

// DeleteTestById mocks base method.
func (m *MockTests) DeleteTestById(ctx context.Context, testID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTestById", ctx, testID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTestById indicates an expected call of DeleteTestById.
func (mr *MockTestsMockRecorder) DeleteTestById(ctx, testID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTestById", reflect.TypeOf((*MockTests)(nil).DeleteTestById), ctx, testID)
}

// GetAllTestsByUserID mocks base method.
func (m *MockTests) GetAllTestsByUserID(ctx context.Context, userID int, args domain.GetAllTestsParams) ([]domain.Test, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTestsByUserID", ctx, userID, args)
	ret0, _ := ret[0].([]domain.Test)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTestsByUserID indicates an expected call of GetAllTestsByUserID.
func (mr *MockTestsMockRecorder) GetAllTestsByUserID(ctx, userID, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTestsByUserID", reflect.TypeOf((*MockTests)(nil).GetAllTestsByUserID), ctx, userID, args)
}

// GetTest mocks base method.
func (m *MockTests) GetTest(ctx context.Context, testID int) (domain.Test, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTest", ctx, testID)
	ret0, _ := ret[0].(domain.Test)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTest indicates an expected call of GetTest.
func (mr *MockTestsMockRecorder) GetTest(ctx, testID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTest", reflect.TypeOf((*MockTests)(nil).GetTest), ctx, testID)
}

// UpdateTestById mocks base method.
func (m *MockTests) UpdateTestById(ctx context.Context, testID int, test domain.Test) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTestById", ctx, testID, test)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTestById indicates an expected call of UpdateTestById.
func (mr *MockTestsMockRecorder) UpdateTestById(ctx, testID, test interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTestById", reflect.TypeOf((*MockTests)(nil).UpdateTestById), ctx, testID, test)
}
